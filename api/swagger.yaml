swagger: "2.0"
info:
  description: "Aimsquant api publisher"
  version: "1.0.0"
  title: "AimsQuant api"
  termsOfService: "http://www.aimsquant.com/terms/"
  contact:
    email: "shiv.chawla@aimsquant.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: 'localhost:3002'
basePath: "/api/v2"
tags:
- name: "user"
  description: "Operations about user"
- name: "thread"
  description: "operations about thread"
- name: "strategy"
  description: "operation about strategy"
- name: "backtest"
  description: operations on backtest
- name: "forwardtest"
  description: operations on forwardtest
- name: "notebook"
  description: "operations on Julia Notebook" 
- name: "config"
  description: "getting the static configs"

schemes:
- "https"
produces:
- "application/json"
paths:
  /user:
    post:
      tags:
      - "user"
      summary: "Register user"
      description: "User registration api."
      operationId: "registerUser"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      - in: query
        name: source
        type: string
        required: false
        default: "adviceqube"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "User"

  /user/login:
    post:
      tags:
      - "user"
      summary: "User Login"
      description: "User login for all roles. If project_admin tenantName is not required"
      operationId: "userlogin"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User login description. Check model definition for valid params"
        required: true
        schema:
          $ref: "#/definitions/Login"
      responses:
        200:
          description: "successful login"
        400:
          description: "Not Authorized"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
  
  /user/login_google:
    post:
      tags:
      - "user"
      summary: "User Login using Google"
      description: "User Login use Google OAuth"
      operationId: userGoogleLogin
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User google login description. Check model definition for valid params"
        required: true
        schema:
          $ref: "#/definitions/GoogleLogin"
      responses:
        200:
          description: "successful login"
        400:
          description: "Not Authorized"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"

  /me:
    get:
      tags:
      - 'user'
      summary: 'get profile of user'
      operationId: getProfile
      consumes:
      - application/json
      parameters:
      - name: "aimsquant-token"
        in: "header"
        description: "auth token"
        type: "string"
        required: true
      security:
      - api_key: []
      responses:
        200:
          description: "successful login"
        400:
          description: "Not Authorized"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"

  /user/activate:
    get:
      tags:
      - "user"
      summary: activate user
      description: activate user
      operationId: activateUser
      parameters:
      - in: query
        name: code
        type: string
        required: true
      - in: query
        name: source
        type: string
        required: false
        default: "adviceqube"
      responses:
        200:
          description: OK
      x-swagger-router-controller: "User"

  /user/resetpage:
    get:
      tags:
      - "user"
      summary: Reset api accessed from email
      description: Reset api accessed from email
      operationId: resetEmailLink
      parameters:
      - in: query
        name: code
        type: string
        required: true
      - in: query
        name: source
        type: string
        required: false
        default: "adviceqube"
      responses:
        200:
          description: OK
      x-swagger-router-controller: "User"

  /user/resetpasswordcall:
    post:
      tags:
      - "user"
      summary: Reset password and save new one
      description: Reset password and save new one
      operationId: resetpasswordcall
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: Request body to reset password"
        required: true
        schema:
          type: object
          properties:
            code:
              type: string
              default: 'reply'
            newpassword:
              type: string
            password:
              type: string
      - in: query
        name: source
        type: string
        required: false
        default: "adviceqube"
      responses:
        200:
          description: OK
      x-swagger-router-controller: "User"

  /user/forgotpassword:
    get:
      tags:
      - "user"
      summary: ask for email as parameter
      description: forgot password api
      produces:
      - application/json
      operationId: forgotPassword
      parameters:
      - in: query
        name: email
        required: true
        type: string
        format: email
      - in: query
        name: source
        type: string
        required: false
        default: "adviceqube"
      x-swagger-router-controller: "User"
      responses:
        200:
          description: OK
 
  /user/setpassword:
    post:
      tags:
      - "user"
      summary: reset password by validating with the code
      description: reset password
      operationId: resetPassword
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/resetpassword'
      - in: query
        name: source
        type: string
        required: false
        default: "adviceqube"
      x-swagger-router-controller: "User"
      responses:
        200:
          description: OK
        400:
          description: code is not valid
  
  /user/sendFeedback:
    post:
      tags:
      - "user"
      summary: send feedback to the admin
      description: send feedback
      operationId: sendFeedback
      security: []
      parameters:
      - in: body
        name: body
        required: true
        schema:
           $ref: '#/definitions/Feedback'
      x-swagger-router-controller: "User"
      responses:
        200:
          description: OK
        400:
          description: Error sending email
  
  /user/sendInvite:
    post:
      tags:
      - "user"
      summary: send Invite to list of email
      description: send Invite
      operationId: sendInvite
      security:
      - api_key: []
      parameters:
      - name: "aimsquant-token"
        in: "header"
        description: "auth token"
        type: "string"
        required: true
      - in: body
        name: body
        required: true
        schema:
           $ref: '#/definitions/invite'
      x-swagger-router-controller: "User"
      responses:
        200:
          description: OK
        400:
          description: Error Sending Email

  /user/sendInfoEmail:
    post:
      tags:
      - "user"
      summary: send informational emails froma admin 
      description: send Info Emails (mass)
      operationId: sendInfoEmail
      security:
      - api_key: []
      parameters:
      - name: "aimsquant-token"
        in: "header"
        description: "auth token"
        type: "string"
        required: true
      - in: body
        name: body
        required: true
        schema:
           $ref: '#/definitions/infoEmail'
      x-swagger-router-controller: "User"
      responses:
        200:
          description: OK
        400:
          description: Error Sending Email

  /user/sendTemplateEmail:
    post:
      tags:
      - "user"
      summary: send informational emails from admin using template
      description: send Info Emails 
      operationId: sendTemplateEmail
      security:
      - api_key: []
      parameters:
      - name: "aimsquant-token"
        in: "header"
        description: "auth token"
        type: "string"
        required: true
      - name: templateId
        in: query
        required: true
        type: string
      - in: query
        name: sender
        required: false
        default: contest
        type: string
      x-swagger-router-controller: "User"
      responses:
        200:
          description: OK
        400:
          description: Error Sending Email

  /user/updateToken:
    put:
      tags:
      - "user"
      summary: Attempt to update token
      description: Update Token
      operationId: updateToken
      parameters:
      - in: body
        name: body
        required: true
        schema:
           $ref: '#/definitions/updateToken'
      x-swagger-router-controller: "User"
      responses:
        200:
          description: OK
        400:
          description: Error Updating Token

  /user/verifyCaptcha:
    post:
      tags:
      - "user"
      summary: Verify captcha token
      description: Verify captcha token
      operationId: verifyCaptchaToken
      parameters:
      - in: body
        name: body
        required: true
        schema:
           $ref: '#/definitions/captchaToken'
      x-swagger-router-controller: "User"
      responses:
        200:
          description: OK
        400:
          description: Error verifying captcha token

  /user/unsubscribe:
    get:
      tags:
      - user
      summary: Unsubsribe from email service
      description: Unsubsribe from email service
      operationId: unsubscribeEmail
      security: []
      parameters:
      - name: email
        in: query
        description: email address of user
        type: "string"
        required: true
      - name: code
        in: query
        type: string
        required: true
      - name: type
        in: query
        type: string
        required: true
      responses:
        200:
          description: OK
        400:
          description: Invalid Input
      x-swagger-router-controller: "User"

  /notebook:
    post:
      tags:
      - notebook
      summary: Create a Julia notebook
      description: Create a Julia notebook        
      operationId: createNotebook
      security:
      - api_key: []
      parameters:
      - name: "aimsquant-token"
        in: "header"
        description: "auth token"
        type: "string"
        required: true
      responses:
        200:
          description: OK
        400:
          description: 'Invalid input'
      x-swagger-router-controller: "Notebook"

    get:
      tags:
      - notebook
      summary: Get all julia notebooks
      description: Get all Julia notebooks        
      operationId: getNotebooks
      security:
      - api_key: []
      parameters:
      - name: "aimsquant-token"
        in: "header"
        description: "auth token"
        type: "string"
        required: true
      responses:
        200:
          description: OK
        400:
          description: 'Invalid input'
      x-swagger-router-controller: "Notebook"

  /notebook/{notebookId}:
    get:
      tags:
      - notebook
      summary: Get Julia notebook
      description: Get Julia notebook
      operationId: getNotebook
      security:
      - api_key: []
      parameters:
      - name: "aimsquant-token"
        in: "header"
        description: "auth token"
        type: "string"
        required: true
      - in: path
        name: notebookId
        type: string
        required: true
      responses:
        200:
          description: OK
        400:
          description: 'Invalid input'
      x-swagger-router-controller: "Notebook"

  /thread:
    post:
      tags:
      - thread
      summary: post a thread
      description: post a new thread
      operationId: createThread
      security:
      - api_key: []
      parameters:
      - name: "aimsquant-token"
        in: "header"
        description: "auth token"
        type: "string"
        required: true
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/Thread'
      responses:
        200:
          description: OK
        400:
          description: 'Invalid input'
      x-swagger-router-controller: "Thread"
    get:
      tags:
      - thread
      summary: get all threads
      description: get all threads
      operationId: getThreads
      security: 
      - api_key: []
      parameters:
      - name: "aimsquant-token"
        in: "header"
        description: "auth token"
        type: "string"
        required: true
      - name: q
        in: query
        description: search term
        required: false
        type: string
      - name: category
        in: query
        description: this search by category
        required: false
        type: string
      - name: following
        in: query
        description: to get all the posts that i follow 
        required: false
        type: boolean
        default: false
      - name: search
        in: query
        description: title search term
        required: false
        type: string
      - name: userId
        in: query
        description: posts that the given userId following
        required: false
        type: string
      - name: personal
        in: query
        required: false
        type: boolean
        default: false
      - name: skip
        in: query
        description: skip number of records
        required: true
        default: 0
        type: number
      - name: limit
        type: number
        required: true
        in: query
        default: 10
      - name: order_param
        type: string
        required: true
        in: query
        default: createdAt
      - name: order
        type: number
        required: true
        in: query
        default: 0
      responses:
        200:
          description: OK
        400:
          description: 'Invalid input'
      x-swagger-router-controller: "Thread"

  /thread_default:
    get:
      tags:
      - thread
      summary: get last 10 threads
      description: get last 10 threads
      operationId: getThreadsDefault
      security: []
      parameters:
      - name: "aimsquant-token"
        in: "header"
        description: "auth token"
        type: "string"
        required: false
      - name: order_param
        type: string
        required: false
        in: query
        default: createdAt
      responses:
        200:
          description: OK
        400:
          description: 'Invalid input'
      x-swagger-router-controller: "Thread"
  
  /thread/{threadId}:
    post:
      tags:
      - thread
      summary: reply to a thread
      description: reply to a thread
      operationId: replyToThread
      security:
      - api_key: []
      parameters:
      - name: "aimsquant-token"
        in: "header"
        description: "auth token"
        type: "string"
        required: true
      - in: path
        name: threadId
        type: string
        required: true
      - in: body
        name: body
        required: true
        schema:
          type: object
          properties:
            markdownText:
              type: string
              default: 'reply'
            backtestId:
              type: string
      responses:
        200:
          description: OK
      x-swagger-router-controller: "Thread"
    get:
      tags:
      - thread
      summary: get a thread
      description: get thread details
      operationId: getThread
      security: []
      #- api_key: []
      parameters:
      - name: "aimsquant-token"
        in: "header"
        description: "auth token"
        type: "string"
        required: false
      - in: path
        name: threadId
        type: string
        required: true
      - in: query
        name: skip 
        type: number  
        default: 0
        required: false
        description: skip number replies
      - in: query
        name: limit
        type: number
        default: 10
        required: false
        description: number of replies
      responses:
        200:
          description: OK
        400:
          description: 'Invalid input'
      x-swagger-router-controller: "Thread"

  /thread/{threadId}/getfollowers:
    get:
      tags:
      - 'thread'
      summary: get list of followers
      description: get list of followers
      operationId: listFollowers
      security: []
      #- api_key: []
      parameters:
      - name: "aimsquant-token"
        in: "header"
        description: "auth token"
        type: "string"
        required: false
      - in: path
        name: threadId
        type: string
        required: true
      - name: skip
        in: query
        description: skip number of records
        required: true
        default: 0
        type: number
      - name: limit
        type: number
        required: true
        in: query
        default: 10
      responses:
        200:
          description: OK
      x-swagger-router-controller: "Thread"
 
  /thread/{threadId}/like:
    post:
      tags:
      - 'thread'
      summary: like a thread
      description: like a thread
      operationId: likeThread
      security:
      - api_key: []
      parameters:
      - name: "aimsquant-token"
        in: "header"
        description: "auth token"
        type: "string"
        required: true
      - in: path
        name: threadId
        type: string
        required: true
      responses:
        200:
          description: OK
      x-swagger-router-controller: "Thread"
 
  /thread/{threadId}/view:
    post:
      tags:
      - 'thread'
      summary: view a thread
      description: view a thread
      operationId: viewThread
      security: []
      #- api_key: []
      parameters:
      - name: "aimsquant-token"
        in: "header"
        description: "auth token"
        type: "string"
        required: false
      - in: path
        name: threadId
        type: string
        required: true
      responses:
        200:
          description: OK
      x-swagger-router-controller: "Thread"
 
  /thread/{threadId}/follow:
    post:
      tags:
      - 'thread'
      summary: like a thread
      description: like a thread
      operationId: followThread
      security:
      - api_key: []
      parameters:
      - name: "aimsquant-token"
        in: "header"
        description: "auth token"
        type: "string"
        required: true
      - in: path
        name: threadId
        type: string
        required: true
      responses:
        200:
          description: OK
      x-swagger-router-controller: "Thread"
  
  /thread/{threadId}/addtag:
    post:
      tags:
      - 'thread'
      summary: like a tag to thread
      description: like a tag to thread
      operationId: addTagToThread
      security:
      - api_key: []
      parameters:
      - name: "aimsquant-token"
        in: "header"
        description: "auth token"
        type: "string"
        required: true
      - in: path
        name: threadId
        type: string
        required: true
      responses:
        200:
          description: OK
      x-swagger-router-controller: "Thread"
  
  /strategy:
    post:
      tags:
      - "strategy"
      summary: create a new strategy
      description: create a new financial strategy
      consumes:
      - "application/json"
      produces:
      - "application/json"
      operationId: createStrategy
      security:
      - api_key: []
      parameters:
      - name: "aimsquant-token"
        in: "header"
        description: "auth token"
        type: "string"
        required: true
      - name: body
        in: body
        required: true
        schema:
          $ref: "#/definitions/Strategy"
      responses:
        200:
          description: "created strategy"
        400:
          description: "Not Authorized"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Strategy"
    get:
      tags:
      - strategy
      summary: get all strategies
      description:  get strategies of user
      operationId: getStrategys
      security:
      - api_key: []
      parameters:
      - name: "aimsquant-token"
        in: "header"
        description: "auth token"
        type: "string"
        required: true
      - name: search
        in: query
        description: search strategy by name or description
        type: string
        required: false
      - name: sort
        in: query
        description: sort criteria
        type: string
        required: false
        enum: ['name', 'type', 'updatedAt asc', 'updatedAt desc']
      responses:
        200:
          description: "strategies"
        400:
          description: "Not Authorized"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Strategy"
  
  /strategy/{strategyId}:
    get:
      tags:
      - strategy
      summary: get strategy
      description:  get strategies of user
      operationId: getStrategy
      security:
      - api_key: []
      parameters:
      - name: strategyId
        in: path
        required: true
        type: string
      - name: "aimsquant-token"
        in: "header"
        description: "auth token"
        type: "string"
        required: true
      responses:
        200:
          description: "strategies"
        400:
          description: "Not Authorized"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Strategy"
    put:
      tags:
      - strategy
      summary: update strategy
      description: update the strategy
      consumes:
      - application/json
      operationId: updateStrategy
      security:
      - api_key: []
      parameters:
      - name: "aimsquant-token"
        in: "header"
        description: "auth token"
        type: "string"
        required: true
      - name: strategyId
        in: path
        required: true
        type: string
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/Strategy'
      responses:
        200:
          description: "created strategy"
        400:
          description: "Not Authorized"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Strategy"
    delete:
      tags:
      - strategy
      summary: delete strategy
      description:  delete a strategy of user
      operationId: deleteStrategy
      security:
      - api_key: []
      parameters:
      - name: strategyId
        in: path
        required: true
        type: string
      - name: "aimsquant-token"
        in: "header"
        description: "auth token"
        type: "string"
        required: true
      responses:
        200:
          description: "strategies"
        400:
          description: "Not Authorized"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Strategy"
  
  /strategy/{strategyId}/exec:
    post:
      summary: executes the strategy and outputs the data (backtest)
      description: execute the strategy
      tags:
      - strategy
      operationId: execStrategy
      security:
      - api_key: []
      parameters:
      - name: "aimsquant-token"
        in: "header"
        description: "auth token"
        type: "string"
        required: true
      - name: strategyId
        in: path
        required: true
        type: string
      - name: body
        in: body
        required: true
        schema:
          $ref: "#/definitions/BacktestSettings"
      responses:
        200:
          description: "created strategy"
        400:
          description: "Not Authorized"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Strategy"
    
  /strategy/{strategyId}/backtests:
    get:
      tags:
      - backtest
      summary: get all backtest results of a strategy
      description: backtest of a strategy
      operationId: getBackTests
      security:
      - api_key: []
      parameters:
      - name: "aimsquant-token"
        in: "header"
        description: "auth token"
        type: "string"
        required: true
      - name: strategyId
        in: path
        required: true
        type: string
      - name: select
        in: query
        required: false
        type: string
      - name: skip
        in: query
        description: skip number of records
        required: true
        default: 0
        type: number
      - name: limit
        type: number
        required: true
        in: query
        default: 10
      - name: sort
        in: query
        type: string
        required: false
        description: sort criteria
      responses:
        200:
          description: "get backtest"
          schema:
            $ref: "#/definitions/Backtest" 
        400:
          description: "Not Authorized"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Backtest"
  
  /backtest/{backtestId}:
    get:
      tags:
      - backtest
      summary: get the backtest
      operationId: getBackTest
      security:
      - api_key: []
      parameters:
      - name: aimsquant-token
        in: header
        description: auth token
        type: string
        required:  true
      - name: backtestId
        type: string
        required: true
        in: path
      - name: select
        in: query
        required: false
        type: string
      responses:
        200:
          description: backtest object
          schema:
            $ref: '#/definitions/Backtest'
        400:
          description: "Not Authorized"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Backtest"
    delete:
      tags:
      - backtest
      summary: delete the backtest
      operationId: deleteBackTest
      security:
      - api_key: []
      parameters:
      - name: aimsquant-token
        in: header
        description: auth token
        type: string
        required:  true
      - name: backtestId
        type: string
        required: true
        in: path
      responses:
        200:
          description: 'deleted'
        400:
          description: "Not Authorized"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Backtest"
 
  /forwardtest:
    post:
      summary: create a forward test for a corresponding backtest/strategy
      description: create an forward test for ongoing execution
      tags:
      - forwardtest
      operationId: createForwardtest
      security:
      - api_key: []
      parameters:
      - name: "aimsquant-token"
        in: "header"
        description: "auth token"
        type: "string"
        required: true
      - name: body
        in: body
        required: true
        schema: 
          $ref: '#/definitions/Forwardtest'
        description: Backtest Id
      responses:
        200:
          description: "created forward test"
        400:
          description: "Not Authorized"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Forwardtest"
  
  /forwardtest/{forwardtestId}:
    get:
      tags:
      - forwardtest
      summary: get the forwardtest
      operationId: getForwardTest
      security:
      - api_key: []
      parameters:
      - name: aimsquant-token
        in: header
        description: auth token
        type: string
        required:  true
      - name: forwardtestId
        type: string
        required: true
        in: path
      - name: select
        type: string
        required: false
        in: query
      responses:
        200:
          description: Forwardtest object
          schema:
            $ref: '#/definitions/Forwardtest'
        400:
          description: "Not Authorized"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Forwardtest"

    put:
      tags:
      - forwardtest
      summary: update the forwardtest
      operationId: updateForwardTest
      security:
      - api_key: []
      parameters:
      - name: aimsquant-token
        in: header
        description: auth token
        type: string
        required:  true
      - name: forwardtestId
        type: string
        required: true
        in: path
      - name: active
        type: boolean
        required: false
        in: query
      responses:
        200:
          description: forward object
          schema:
            $ref: '#/definitions/Forwardtest'
        400:
          description: "Not Authorized"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Forwardtest"
    
    delete:
      tags:
      - forwardtest
      summary: delete the forwardtest
      operationId: deleteForwardTest
      security:
      - api_key: []
      parameters:
      - name: aimsquant-token
        in: header
        description: auth token
        type: string
        required:  true
      - name: forwardtestId
        type: string
        required: true
        in: path
      responses:
        200:
          description: forwardtest
        400:
          description: "Not Authorized"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Forwardtest"

  
securityDefinitions:
  api_key:
    type: apiKey
    name: aimsquant-token
    in: header

definitions:
  User:
    type: "object"
    required:
    - firstName
    - lastName
    - email
    - password
    properties:
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      photo:
        type: "string"
      aboutme:
        type: "string"
      education:
        type: "string"
      profession:
        type: "string"

  Login:
    type: "object"
    properties:
      email:
        type: "string"
      password:
        type: "string"

  GoogleLogin:
    type: object
    properties:
      accessToken:
        type: string
  
  Thread:
    type: object
    required:
    - category
    - title
    - markdownText
    properties:
      category:
        type: string
        enum:
        - "Share your Idea"
        - "Questions and Answers"
        - "News and Announcements"
      title:
        type: string
      markdownText:
        type: string
      backtestId:
        type: string
  
  resetpassword:
    type: object
    required:
    - password1
    - password2
    - code
    properties:
      password1:
        type: "string"
      password2:
        type: "string"
      code:
        type: "string"
        format: "uuid"

  updateToken:
    type: object
    required:
      - token
      - email
    properties:
      token:
        type: string
      email:
        type: string
      force:
        type: boolean
        default: false

  captchaToken:
    type: object
    required:
      - token
    properties:
      token:
        type: string
  
  Error:
    type: "object"
    properties:
      code:
        type: "string"
      message:
        type: "string"

  Watchlist:
    type: object
    required:
      - name
      - securities
    properties:
      name:
        type: string
      securities:
        type: array
        items:
          $ref: '#/definitions/Security'

  Address:
    type: object
    properties:
      line1:
        type: string
        default: ""
      line2:
        type: string
        default: ""
      line3:
        type: string
        default: ""
      city: 
        type: string
        default: ""
      state: 
        type: string
        default: ""
      pincode: 
        type: number
      country:
        type: string
        default: "IN"

  ApprovalMessage:
    type: object
    required:
      - message
      - approved
      - prohibit
    properties:
      message: 
        type: string
      approved:
        type: boolean
      prohibit:
        type: boolean

  ApprovalMessageNew:
    type: object
    required:
      - message
      - status
    properties:
      message:
       type: string
      status:
        type: boolean
      detail:
        type: array
        items:
          $ref: '#/definitions/Approval'
      investmentObjective:
        $ref: '#/definitions/InvestmentObjective'
  
  Approval:
    type: object
    required:
      - field
    properties:
      field: 
        type: string
      reason:
        type: string
      valid:
        type: boolean
        default: false
      requirements:
        type: array
        items: 
          type: string
  
  InvestmentObjective:
    type: object
    properties:
      goal: 
        type: object
        $ref: '#/definitions/Goal'
      sectors: 
        type: object
        $ref: '#/definitions/Sectors'
      portfolioValuation: 
        type: object
        $ref: '#/definitions/PortfolioValuation'
      capitalization: 
        type: object
        $ref: '#/definitions/Capitalization'
      userText: 
        type: object
        $ref: '#/definitions/UserText'
      
  Goal:
    type: object
    required:
      - field
    properties: 
      field:
        type: string
      investorType:
        type: string
      suitability:
        type: string
      valid:
        type: boolean
        default: false
      reason:
        type: string
  
  Sectors:
    type: object
    properties:
      detail:
        type: array
        items:
          type: string
      valid:
        type: boolean
        default: false
      reason:
        type: string
  
  PortfolioValuation:
    type: object
    properties:
      field:
        type: string
        enum: ['Growth', 'Value', 'Blend']
      valid:
        type: boolean
        default: false
      reason:
        type: string
  
  Capitalization:
    type: object
    properties:
      field:
        type: string
        enum: ['Small Cap', 'Mid Cap', 'Large Cap']
      valid:
        type: boolean
        default: false
      reason:
        type: string
 
  UserText:
    type: object
    properties:
      detail:
        type: string
        # default: "Sample Description"
      valid:
        type: boolean
        default: false
      reason:
        type: string    

  SocialProfile:
    type: object
    properties:
      url:
        type: string
      photoUrl: 
        type: string
      userId:
        type: string

  ContestEntry:
    type: object
    required:
      - name
      - portfolio
    properties:
      name: 
        type: string
      portfolio:
        $ref: "#/definitions/Portfolio"

  Contest:
    type: object
    required:
      - name
      - startDate
      - endDate
      - active
      - rules
    properties:
      name:
        type: string
      startDate:
        type: string
        format: date
      endDate:
        type: string
        format: date
      active:
        type: boolean
        default: false
      rules:
        type: object
        $ref: '#/definitions/ContestRules'
  
  ContestPatch:
    type: object
    properties:
      name:
        type: string
      startDate:
        type: string
        format: date
      endDate:
        type: string
        format: date
      active:
        type: boolean
        default: true
      rules:
        type: object
        $ref: '#/definitions/ContestRules'

  ContestRules:
    type: object
    required:
      - prize
      - ruleTemplateFileName
    properties:
      prize:
        type: array
        items: 
          $ref: '#/definitions/ContestPrize'
      ruleTemplateFileName:
        type: string
    
  ContestPrize:
    type: object
    required:
      - rank
      - value
    properties: 
      rank:
        type: number
      value:
        type: number

  StockPrediction:
    type: object
    required:
      - position
      - startDate
      - endDate
      - target
    properties:
      position:
        type: object
        $ref: '#/definitions/Position'
      startDate:
        type: string
        format: date
      endDate:
        type: string
        format: date
      target:
        type: number
      stopLoss:
        type: number
        default: -1
      conditionalType:
        type: string
        default: "NOW"
        enum: ["NOW", "CROSS", "LIMIT"]
      real:
        type: boolean
        default: false
    

  AllocationAccount:
    type: object
    required:
      - cash
      - notes
      - maxInvestment
      - minInvestment
      - automated
    properties:
      cash:
        type: number
      notes:
        type: string
      maxInvestment:
        type: number
        default: 50
      minInvestment:
        type: number
        default: 10
      notAllowedStocks:
        type: array
        items:
          type: string
      automated:
        type: boolean
        default: false
      allowedInvestments:
        type: array
        default: [10, 25, 50]
        items: 
          type: number

  UpdateCash:
    type: object
    required:
      - cash
      - notes
    properties:
      cash:
        type: number
      notes:
        type: string

  AllocationStatus:
    type: object
    required:
      - status
      - notes
    properties:
      status:
        type: boolean
      notes:
        type: string


  PredictionTradeActivity:
    type: object
    required:
      - predictionId
      - advisorId
      - tradeActivity
    properties:
      predictionId:
        type: string
        format: uuid
      advisorId: 
        type: string
        format: uuid
      tradeActivity:
        type: object
        $ref: '#/definitions/TradeActivity'

  PlaceOrder:
    type: object
    required:
      - predictionId
      - advisorId
      - order
    properties:
      predictionId:
        type: string
        format: uuid
      advisorId: 
        type: string
        format: uuid
      order:
        type: object
        $ref: '#/definitions/Order'
      message:
        type: string
      
  ModifyOrder:
    type: object
    required:
      - advisorId
      - orderId
      - stock
      - tradeDirection
      - quantity
      - price
      - orderType
      - predictionId
    properties:
      orderId:
        type: number
      stock:
        type: string
      tradeDirection:
        type: string
      quantity:
        type: number
      price:
        type: number
      orderType:
        type: string
      tif:
        type: string
      advisorId: 
        type: string
        format: uuid
      predictionId: 
        type: string
        format: uuid


  CancelOrder:
    type: object
    required:
      - orderId
      - advisorId
      - predictionId
    properties:
      orderId:
        type: number
      advisorId:
        type: string
        format: uuid
      predictionId:
        type: string
        format: uuid
      message:
        type: string
  
  Order:
    type: object
    required: 
      - symbol
      - tradeDirection
      - quantity
    properties:
      symbol:
        type: string
      orderType:
        type: string
        enum: ["bracket", "limit", "market", "stopLimit", "marketClose", "marketIfTouched"]
      quantity:
        type: number
      price:
        type: number
      tradeDirection:
        type: string
        enum: ["BUY", "SELL"]
      bracketFirstOrderType:
        type: string
        enum: ["LIMIT", "MARKET"]
      stopLossPrice:
        type: number
      profitLimitPrice:
        type: number
  
  TradeActivity:
    type: object
    required:
      - date
      - direction
      - quantity
      - price
    properties:
      date:
        type: string
        format: date
      direction:
        type: string
        default: "BUY"
        enum: ["BUY", "SELL"]
      quantity:
        type: number
      price:
        type: number
      brokermessage:
        type: object
      automated:
        type: boolean
        default: false
      notes:
        type: string


  ReadStatus:
    type: object
    required:
      - predictionId
      - advisorId
      - readStatus
    properties:
      predictionId:
        type: string
        format: uuid
      advisorId: 
        type: string
        format: uuid
      readStatus:
        type: string
        default: "UNREAD" 
        enum: ["UNREAD", "READ/ACTED", "READ/NOT-ACTED"]
    
  SkipStatus:
    type: object
    required:
      - predictionId
      - advisorId
    properties:
      predictionId:
        type: string
        format: uuid
      advisorId:
        type: string
        format: uuid
      message:
        type: string

  AdminModification:
    type: object
    required:
      - predictionId
      - advisorId
      - modification
    properties:
      predictionId:
        type: string
        format: uuid
      advisorId: 
        type: string
        format: uuid
      modification:
        type: object

  RealPredictionModification:
    type: object
    required:
      - predictionId
      - advisorId
      - avgPrice
    properties:
      predictionId:
        type: string
        format: uuid
      advisorId:
        type: string
        format: uuid
      avgPrice:
        type: number

  AllocationModification:
    type: object
    properties:
      modifications:
        type: object